/*
** bsq.c for  in /home/januar_m/delivery/CPE/CPE_2016_BSQ
** 
** Made by Martin Januario
** Login   <martin.januario@epitech.eu>
** 
** Started on  Mon Dec  5 13:09:22 2016 
** Last update Wed Dec  7 16:07:49 2016 
*/

#include	<stdio.h>
#include	<stdlib.h>
#include	"bsq.h"
#include	"my.h"

void	ini_coor(t_coo *coor, int nb1, int nb2)
{
  coor->x = 0;
  coor->y = 0;
  coor->x_tmp = 0;
  coor->y_tmp = 0;
  coor->nb_check = 0;
  coor->nb_ligne = nb2;
  coor->lenght = nb1 - 1;
  coor->x_min = 0;
  coor->y_max = 0;
  coor->y_min = 0;
  coor->x_max = 0;
}

int	we_are_the_saviors(t_coo *coor)
{
  if (coor->x_max - coor->x_min < coor->nb_check && coor->x_min + coor->nb_check < coor->lenght &&
      coor->y_min + coor->nb_check < coor->nb_ligne)
    {
      coor->x_min = coor->x_tmp;
      coor->y_min = coor->y_tmp;
      coor->x_max = coor->x_tmp + coor->nb_check;
      coor->y_max = coor->y_tmp + coor->nb_check;
      printf("(%d, %d)\n(%d, %d)\n~~~~~~~~~~~~~~\n",
	     coor->x_min, coor->y_min, coor->x_max, coor->y_max);
      return (1);
    }
  return (0);
}

int	found_check_max(t_coo *coor, int **obs, int idx_y)
{
  int	idx;

  idx = 0;
  while (coor->x_tmp > obs[idx_y][idx] && obs[idx_y][idx] != -1)
    idx++;
  printf("start: (%d, %d)\n", coor->x_tmp, coor->y_tmp);
  printf("ligne: %d\n", idx_y);
  printf("obs[idx_y][%d]: %d\n", idx, obs[idx_y][idx]);
  if (idx == 0 && obs[idx_y][idx] == -1)
    return (coor->lenght - coor->x_tmp);
  if (idx == 0 && coor->x_tmp != 0)
    return (obs[idx_y][idx] - coor->x_tmp - 1);
  if (idx == 0)
    return (obs[idx_y][idx] - 1);
  if (obs[idx_y][idx] == -1)
    return (coor->lenght - coor->x_tmp);
  else
    return (obs[idx_y][idx] - coor->x_tmp);
}

int	check_square(t_coo *coor, int **obs)
{
  int	idx_y;
  int	tmp;
  
  idx_y = coor->y_tmp;
  tmp = 0;
  while  (idx_y < coor->nb_ligne)
    {
      tmp = found_check_max(coor, obs, idx_y);
      printf("valeur de tmp:%d && nb_check : %d\n---------------\n", tmp, coor->nb_check);
      if (tmp < coor->nb_check)
	return (1);
      idx_y++;
    }
  if (we_are_the_saviors(coor) == 1)
    return (-1);
  return (0);
}

int	start_boucle(t_coo *coor, int **obs)
{
  int	idx_x;
  int	check;

  idx_x = coor->x_tmp;
  check = 0;
  while (coor->nb_check != 0 && coor->x_max - coor->x_min < coor->nb_check) 
    {
      check = check_square(coor, obs);
      coor->nb_check--;
      if (check == -1)
      	coor->x_tmp++;
    }
  return (0);
}

int	prepare_start(t_coo *coor, int **obs)
{
  coor->y_tmp = coor->y;
  if (coor->x == 0)
    {
      coor->x_tmp = 0;
      coor->nb_check = obs[coor->y][coor->x] - 1;
    }
  else if (obs[coor->y][coor->x] == -1)
    {
      coor->x_tmp = obs[coor->y][coor->x - 1] + 1;
      coor->nb_check = coor->lenght - obs[coor->y][coor->x - 1] - 1;
    }
  else
    {
      coor->x_tmp = obs[coor->y][coor->x - 1] + 1;
      coor->nb_check = obs[coor->y][coor->x] - obs[coor->y][coor->x - 1] - 2;
    }
  start_boucle(coor, obs);
  return (0);
}

int	bsq(char **tab, int **obs, int nb_ligne, int lenght)
{
  t_coo	*coor;

  if ((coor = malloc(sizeof(t_coo) * 1)) == NULL)
    return (84);
  ini_coor(coor, lenght, nb_ligne);
  while (coor->y < nb_ligne)
    {
      coor->x = 0;
      while (obs[coor->y][coor->x] != -1)
	{
	  if (obs[coor->y][coor->x] != obs[coor->y][coor->x] + 1)
	    prepare_start(coor, obs);
	  coor->x += 1;
	}
      if (obs[coor->y][coor->x - 1] != lenght - 1 && obs[coor->y][coor->x] == -1)
	prepare_start(coor, obs);
      coor->y += 1;
    }
  printf("-----------------------------\nresult :\n(%d, %d)\n(%d, %d)\n",
	 coor->x_min, coor->y_min, coor->x_max, coor->y_max);
  disp_tab(tab, coor);
  return (84);
}
